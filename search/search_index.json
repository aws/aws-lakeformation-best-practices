{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AWS Lake Formation","text":"<p>AWS Lake Formation helps you centrally govern, secure, and globally share data for analytics and machine learning. This guide provides readers best practices when using various features and aspects of Lake Formation.</p> <p>This guide is broken down in topics:</p> <ul> <li>Best Practices when adopting Lake Formation</li> <li>Best Practices when using Lake Formations data sharing feature</li> <li>Best Practices when using LF-Tags</li> </ul>"},{"location":"adopting-lake-formation/considerations-when-adopting-lake-formation/","title":"Considerations when adopting Lake Formation","text":"<p>AWS Lake Formation centralizes permissions management of your data and makes it easier to share data across your organization and with external customers. With the AWS Glue Data Catalog as the central point of metadata for data in AWS data sources such as Amazon S3, you can manage fine-grained data lake access permissions using familiar database-like features of Lake Formation. Lake Formation manages the metadata permissions of tables in Data Catalog and the corresponding data permissions for S3 in one place. When you set up permissions for users, you define Grant/Revoke style policies for the databases and tables and register the data location with Lake Formation.  Further, Lake Formation provides LF-Tags to scale permissions policies and provides CloudTrail logging for auditing and reports. </p> <p>We recommend you to consider the below process while you are evaluating and choosing to adopt Lake Formation. They are:</p> <ol> <li>Take inventory of your data stores. Lake Formation provides data governance for data on S3, while extending it to Amazon Redshift data shares and extending the Data Catalog to federate into external hive metastores.</li> <li>Review your current data access management model. What is your current data access model? Is it Apache Ranger, a combination of S3 Bucket Policies, IAM policies and Glue Resource policies?</li> <li>Review what analytics engines and AWS services you use for your data analysis and ETL pipelines. Validate that your query engines are supported with the granularity of permissions (example- table level support, column level, or row level, support for Glue Views) that you need. AWS analytics services that integrate with Lake Formation are detailed in this documentation page. </li> <li>Are you using Open source transactional table formats such as Apache Iceberg, Apache Hudi or Linux Foundation\u2019s Deltalake? You can look at what levels of Lake Formation fine grained permissions are supported for each table format by each integrated analytics service in our documentation. </li> <li>What permissions model suits your data platform?  Do you want to keep your existing model or do you want to review Lake formation? Many customers who choose Lake Formation do so because they want to adopt permissions based on tagging (that is,  LF-Tags ) or want to adopt a model that is more centralized with the metadata in Glue Data Catalog or want to integrate tightly with AWS analytics services. You could continue to use your existing permissions model if it provides constructs and policy mechanisms not yet supported by Lake Formation (for example, Attribute Based Access Control). </li> <li>What is your account topology?  You may consider splitting monolothic AWS accounts to smaller accounts and leverage Lake Formation\u2019s cross account sharing capabilities. This provides benefits like reducing single points of failures, allows teams or organizations to own and manage their data processing infrastructure, and scale their usage of AWS services.</li> <li>Do you want to apply Lake Formation permissions to all resources, a subset of resources, all users, or a subset of users. Please see Lake Formation Adoption Modes</li> <li>Lastly, if you are moving from a different authorization engine, how are you model the permissions to your users? Lake Formation can create policies against AWS IAM users and roles, AWS QuickSight Authors, and AWS Identity Center users and groups. If you need identity based policies, then you will need to integrate with AWS Identity Center using a feature called Trusted Identity Propogation. At the time of writing this, not all AWS services support Identity center so please refer to the public docs. </li> </ol> <p>Once all of these points have been considered, the general process to adopt Lake Formation can be found in detail in the Lake Formation public documentation. </p>"},{"location":"adopting-lake-formation/general-best-practices/","title":"General Best Practices","text":""},{"location":"adopting-lake-formation/general-best-practices/#lake-formation-service-linked-role-vs-customer-managed-roles","title":"Lake Formation Service Linked Role vs Customer Managed Roles","text":"<p>We do not recommend using Lake Formation\u2019s Service Linked Role (SLR) in production environments. Although using SLR is provided for convenience, there are few points to consider if you choose it.  You cannot edit the SLR\u2019s policy if needed. Encrypted catalogs are not supported with SLR for cross account sharing. Significantly large number of S3 locations registered with Lake Formation may cause IAM policy limits to be breached. EMR on EC2 does not support SLR registered locations for data access. Lastly, SLR's do not adhere to AWS Service Control Policies. Hence, we recommend creating a custom IAM role to always register your data locations with Lake Formation. </p>"},{"location":"adopting-lake-formation/general-best-practices/#using-lake-formation-administrator-role","title":"Using Lake Formation Administrator Role","text":"<p>Lake Formation Administrator permissions could be over-permissive for specific operations on the data lake. There is also a limit of 30 on the number of administrators that can be registered. We recommend you to create roles with limited IAM and Lake Formation permissions for targeted operations. Limit who can be a Lake Formation administrator role to those that need to administer the AWS account and processes that must have full access to the Glue Data Catalog. For read-only access to the entire Glue Data Catalog, we recommend using Read-Only Lake Formation Administrator for operations such as auditing that do not require write access.  For use cases where a user needs to be able to grant access to other users within the account, provide them with Grantable permissions on resources that they manage. </p> <p>Below are examples of when not to use Lake Formation administrator:</p> <ul> <li>Glue crawler role\u2019s - Do not make Glue crawler roles as Lake Formation administrator. Grant permissions to the crawler role to create tables in select databases in the catalog. Grant data location permission to the crawler role on specific S3 locations to which the databases point to. </li> <li>Data producer/owner/steward - Grant data location permission to create databases and tables in specific S3 locations. Provide Grantable permissions to these personas on the databases and tables that they manage.</li> </ul>"},{"location":"adopting-lake-formation/general-best-practices/#when-to-use-data-filters-versus-a-glue-view","title":"When to use Data Filters versus a Glue View ?","text":"<p>A data filter can be created only on individual/specific table while a Glue View can be created across multiple tables. A data filter could be used when you have simple and specific row and column filtering needs on a table. </p> <p>The Glue Views are different from that of the standard table views that you create in Amazon Athena, Apache Hive, Apache Spark, Presto, Trino, etc. The Glue Views is a feature of Data Catalog in Preview and are based on definer semantics, where access to the Glue Views are defined by the user who creates the view. </p> <p>You can share a Glue View without sharing the underlying tables. The recipient can query only the Glue View and not access the tables.  You can share a Glue View from one account to another but cannot create a new Glue View that contains tables shared from other accounts. </p> <p>Glue Views is currently in Preview. We will add more best practices as the feature becomes generally available. </p>"},{"location":"adopting-lake-formation/lake-formation-adoption-modes/","title":"Lake Formation adoption modes","text":"<p>Before Lake Formation was available, users of Glue Data Catalog can use a combination of Data Catalog resource policies and IAM permissions (that is, S3 bucket policies and IAM principal policies) to manage access to both the metadata in the catalog and the data in S3 that the metadata points to. The combination of S3 bucket policies, IAM principal policies and Glue catalog policies can be referred to as resource based policies. </p> <p>However, you do not have to adopt Lake Formation completely in order to use it. You can mix and match permission models between Lake Formation and resource based policies for your catalog resources. We will go through some of the best practices and reasons to choose one over the other.</p>"},{"location":"adopting-lake-formation/lake-formation-adoption-modes/#hybrid-access-mode-versus-lake-formation-mode-what-to-choose","title":"Hybrid access mode versus Lake Formation mode - what to choose?","text":"<p>There are two modes in which you can register an S3 data location with Lake Formation - Lake Formation mode and Hybrid access mode. When you register a database or table location in Lake Formation mode, you are choosing Lake Formation as the only permissions model to manage all permissions to those catalog resources. In this case, after setting up permissions to users, you need to revoke resource based policies. </p> <p></p> <p>When you register a database or table location with Lake Formation in hybrid access mode, you can choose to provide Lake Formation permissions to some users and maintain the resource based policy permissions to others, without interruptions. One user gets access to the catalog resources through only one permissions model. </p> <p></p>"},{"location":"adopting-lake-formation/lake-formation-adoption-modes/#use-cases-to-adopt-hybrid-access-mode","title":"Use-cases to adopt Hybrid access mode","text":"<p>When you have existing users of Data Catalog with resource based policy permissions and you want to adopt Lake Formation, we recommend you to use hybrid access mode. You can select the databases and tables that you want to use Lake Formation permissions with, register them with Lake Formation as hybrid access mode resources ( RegisterResource() API ). Then, you can start adding Lake Formation permissions for new users on these resources. You can also gradually add Lake Formation permissions for your existing users and remove their resource based policy permissions. The hybrid access mode provides minimal operational changes as your existing access to users is not interrupted when you adopt Lake Formation.</p> <p>For example, if you have extract, transform and load (ETL) processes currently in production that use resource based policy permissions, enabling Lake Formation permissions to these jobs can impact them. You can onboard your new team members like data scientists and data analysts to these same databases and tables with Lake Formation permissions while continuing to use resource based policy permissions for your production workflows uninterruptedly. Some ETL workflows that require full table access could use the resource based policy permissions while you can add fine grained access for the same tables to your data scientists and analysts. You do not have to maintain two copies of the same tables, in order to share them with different users. </p> <p>The below picture illustrates hybrid access mode permissions on the same catalog resource within an account for a data-analyst role versus a data-engineer role. </p> <p></p> <p>The below picture illustrates hybrid access mode permissions on the same catalog resource shared cross account for a data-analyst role versus a data-engineer role. </p> <p></p> <p>For setting up Lake Formation permissions in hybrid access mode, refer to documentation.</p>"},{"location":"adopting-lake-formation/lake-formation-adoption-modes/#use-cases-to-adopt-lake-formation-mode","title":"Use-cases to adopt Lake Formation mode","text":"<p>If you are pretty new to Data Catalog, if your current users and ETL workloads do not heavily use Data Catalog with resource based policy permissions, and if you prefer to have only one permisisons model for ease of maintenance using Lake Formation, we recommend Lake Formation mode. You can crawl the new data sets in S3 using Glue Crawlers, create databases and tables in the Glue Data Catalog, set up Lake Formation permissions to your users and register them with Lake Formation in Lake Formation mode. Once the Lake Formation permissions are verified to work, you may clean up the IAM policy permissions, Data Catalog resource policies and S3 bucket policies. </p> <p>Large organizations that use the IAM based policy permission's for GDC and S3 access sharing may have come across S3 bucket policy limits and IAM policy limits. Lake Formation is designed to help avoid those limitations. </p> <p>We also recommend to continue using Lake Formation mode on a database once it is set up and not change it to hybrid access mode. We have provided step by step instructions if you prefer to change a Glue resource to hybrid resource though. In order to avoid impacting the existing Lake Formation users, we recommend doing it during offline hours. </p> <p>For setting up Lake Formation permissions in Lake Formation mode, refer to documentation. </p>"},{"location":"adopting-lake-formation/lake-formation-adoption-modes/#using-lf-tags-along-with-hybrid-access-mode","title":"Using LF-Tags along with hybrid access mode","text":"<p>You can grant permissions on a database or table using either named resource method or LF-tags. For a hybrid resource, you can not opt-in the principal, that is, CreateLakeFormationOptIn() API to use Lake Formation permission by specifying the LF-Tags. You can only select the databases and tables by name and opt-in the principal to make Lake Formation permissions effective immediately. </p> <p>If you are using LF-Tags for granting permissions, then please follow the below steps to opt-in. </p> <ol> <li>List out the catalog objects to which the LF-Tags are associated.</li> <li>List out the principals who were granted permissions on those resources.</li> <li>Opt-in the principals and resources as a separate step. For this, you can use the Hybrid access mode on the left navigation bar on the console or use SDK/API CreateLakeFormationOptIn().</li> </ol>"},{"location":"adopting-lake-formation/lake-formation-adoption-modes/#limitations","title":"Limitations","text":"<p>Please refer to our public docs for current list of considerations and limitations. </p>"},{"location":"adopting-lake-formation/overview/","title":"Adopting Lake Formation Best Practices","text":"<p>To successfuly adopt Lake Formation, there are many different considerations that need to be taken. This section will go over some of the key areas, with best practices, on how to adopt Lake Formation.</p> <ul> <li>See Considerations when adopting Lake Formation for a non-exhaustive list of areas that will need to be looked at the beginning of adopting Lake Formation. </li> <li>See General best practices for high level best practices when configuring Lake Formation.</li> <li>See Lake Formation adoption modes for looking into Lake Formations Hybrid Access Mode.</li> </ul>"},{"location":"data-sharing/cross-account-faq/","title":"Cross Account FAQS","text":""},{"location":"data-sharing/cross-account-faq/#1-what-are-the-various-cross-account-topologies-customers-can-share-resources","title":"1. What are the various cross account topologies customers can share resources?","text":"<p>Lake formation cross account sharing feature is used for sharing catalog and underlying data lake access. Customer can share resource without duplicating data avoiding extensive pipelines to make the data available to other lines of business. These models enable various lines of business collaboration and require planning to standardize the enterprise level adaption.</p>"},{"location":"data-sharing/cross-account-faq/#peer-to-peer-pure-data-mesh","title":"Peer to Peer (Pure Data Mesh)","text":"<p>Peer to Peer model is one of the data mesh patterns that is used by customers who have high degree of autonomy established within the domain and wants to operate in decentralized fashion.  In this model, data producers own data products and the data ownership remains with the data producer generating them. Data product owners will manage the lifecycle of the data and also control access to the data when sharing it with consumers. Data producers and data consumers operate independently and don\u2019t depend on central governance platform/team for data distribution/fulfillment. There is a lot of information that we have left out, but if you wish to learn more about data meshes, a great resource is Data Mesh Principles and Logical Architecture by Zhamak Dehghani</p> <p>To see how to build peer to peer data meshes, refer to blog: Securely share your data across AWS accounts using AWS Lake Formation. </p>"},{"location":"data-sharing/cross-account-faq/#hub-and-spoke","title":"Hub and Spoke","text":"<p>This topology can be generalized as there is a central AWS account (hub) that always owns the catalog. Then there are nodes that interact with the central account (spokes). However, there are specific implementations where there are two choices: 1/ who owns data sets and 2/ who permissions access to those data sets.</p> <p>When looking at the decision on who owns the data sets, there are two possibilities: 1/ the central account owns the data, and data producers write their data to the central accounts or 2/ the producers down the data in their own accounts. When the central account owns all the data within the hub and spoke, there can be very strict controls on who can access it, and what data is written. For example, a central team can continously monitor the data to ensure that PII (personally identifiable information) is properly cataloged and secured. When producers own their own data, they have more freedom to do what they want with that data.</p> <p>When looking at the decision on who governs the datasets, there are two possibilities: 1/ the central account decides whether a consumer has the ability to consume a data set by a central governance team, or 2/ data producers can make those decisions. </p> <p>Based on whether the two decisions, customers can achieve different business goals. Some customers choose that all data is stored in the central account, and all decisions on who is allowed to access a dataset is governed centrally. This provides the greatest amount of control on the participants within the organization. Some customers have increasingly decided to decentralize as much as possible by having producers own their datasets, and make decisions on who can access their datasets, similar to how data meshes operate like in our next section.</p>"},{"location":"data-sharing/cross-account-faq/#centrally-governed-data-mesh","title":"Centrally governed data mesh","text":"<p>This a hybrid of both hub and spoke model and data mesh. Customers chose this topology when customers want to centralizes metadata discovery and permission management in governance account and make the data available to other AWS accounts. In this model producers publish their data assets with a central governance account that hosts the metadata for organizations to discovery and request access for the resource. Producers, like in data meshes, will permission consumers. Central governance account provides better audibility on resource access and scaling the permission across enterprise, while proper compliance controls can take place. </p> <p>Like data meshes, this requires orgnaizations to use a different paradigm that some organizations may not be used to. However, if this model is attractive, AWS highly recommend that you take a look at AWS Data Zone, which leverages Lake Formation for security management, Glue Data Catalog for techincal data management, while offering a business catalog, approval workflows, and Interoperability with third party vendors. </p> <p>However, if you wish to implement this model without Data Zone, please refer to blog </p>"},{"location":"data-sharing/cross-account-faq/#2-what-is-various-cross-account-sharing-versions-available-in-lake-formation","title":"2. What is various cross account sharing versions available in Lake Formation?","text":"<p>See [Cross Account versions] (cross-account-versions.md) for various cross account versions available.</p>"},{"location":"data-sharing/cross-account-faq/#3-what-are-the-factors-to-consider-when-choosing-account-level-sharing-vs-direct-sharing-with-principal","title":"3. What are the factors to consider when choosing account level sharing vs direct sharing with principal?","text":"Account to Account Account to Principal Control model When a source account (producer) wants to share a resource with a target account (consumer) but expects the consumer's data lake administrator to manage the resource permissions within their account, the source account can grant access at the account level rather than specifying individual users. When source account(producer) wants to have tighter control on resource permission and wants to completely control who have access to the resource, customers can choose sharing the resource to direct principal in target account. Cross-Account version requirement All Cross Account version supports this model Cross Account version V3 and above supports this model Receiver policies Since the resource is shared at the account level, the administrator of the target account's data lake should have policies to create a resource link and delegate permissions. No additional policy requirements exist for other principals that are delegated permissions to the resource in the target account. For various personas and policies please refer to public documentation Since the resource is shared cross account to principal, each receiver principal the needs Lake Formation CREATE_TABLE or CREATE_DATABASE permission to create the resource link. They also need the glue:CreateTable or glue:CreateDatabase IAM permission in their IAM policy (based on resource type that is shared). Auditability To understand who has access to a given dataset, you need to review the permissions defined in both the source account where the dataset originated and the target account with which the dataset has been shared. To understand who has access to a given dataset, you can determine this information entirely from the source account. <p>For more details on direct sharing with principal, refer to blog Enable cross-account sharing with direct IAM principals using AWS Lake Formation Tags</p>"},{"location":"data-sharing/cross-account-faq/#4-can-i-share-both-my-glue-data-catalog-resources-catalog-database-table-and-redshift-tables-using-lake-formation-cross-account","title":"4. Can I share both my Glue Data catalog resources (catalog, database, table) and Redshift tables using Lake Formation cross account.","text":"<p>Yes, you can share both data lake resource cataloged in Glue Data Catalog with storage on S3 and Redshift tables shared with Glue Data catalog via data shares (https://docs.aws.amazon.com/redshift/latest/dg/lf_datashare_overview.html) using Lake Formation for cross account access.</p> <p>For more details refer to blog Implement tag-based access control for your data lake and Amazon Redshift data sharing with AWS Lake Formation</p>"},{"location":"data-sharing/cross-account-faq/#5-can-i-share-my-resource-cross-account-cross-region","title":"5. Can I share my resource cross account cross region?","text":"<p>yes, Lake Formation allows querying Data Catalog tables across regions using Athena, EMR, and Glue ETL. By creating resource links in other regions pointing to source databases and tables, you can access data across regions without copying the underlying data or metadata into the Data Catalog. Engines that query the data needs network connectivity to endpoints within the region to access S3 buckets. For example, EMR clusters or Glue ETL jobs running in a private subnet within an AWS VPC may require a NAT gateway, VPC peering, or transit gateway to reach external resources. Any network traffic between source instance to any AWS endpoint stays within the AWS network and does not go over the internet. Refer to (AWS VPC FAQs)[https://aws.amazon.com/vpc/faqs/] for details on network traffic and communication path.</p> <p>For more details on cross region setup refer to blog Configure cross-Region table access with the AWS Glue Catalog and AWS Lake Formation</p>"},{"location":"data-sharing/cross-account-faq/#6-can-i-share-resource-cross-account-using-lake-formation-when-resource-management-within-that-account-is-not-done-using-lake-formation","title":"6. Can I share resource cross account using Lake Formation when resource management within that account is not done using Lake Formation?","text":"<p>Yes, you can use Hybrid access Mode to register the S3 bucket containing your data in Lake Formation in the source account(grantor) and opt-in cross account(target) principal for using Lake Formation mode for sharing. This enables target(receiver) account access to the shared resource using Lake Formation.</p> <p>For more details refer on how hybrid access mode works, refer to blog Introducing hybrid access mode for AWS Glue Data Catalog to secure access using AWS Lake Formation and IAM and Amazon S3 policies</p>"},{"location":"data-sharing/cross-account-faq/#other-references","title":"Other References","text":"<ul> <li>For details on Lake Formation cross account sharing, refer public documentation</li> <li>For more details on cross account sharing versions, refer public documentation. </li> </ul>"},{"location":"data-sharing/cross-account-versions/","title":"Cross Account Versions","text":"<p>Lake Formation improves its sharing features over time, which sometimes requires changes that are not backwards compatible. To give customers flexibility in choosing when to upgrade, Lake Formation uses versioned sharing modes. Each new version retains the benefits of previous versions while adding enhancements.</p> <p>To maximize the benefits of cross-account sharing, it is recommended to use the newest version of cross-account sharing (currently Version 4) when first setting up Lake Formation permissions or when upgrading from older versions.</p>"},{"location":"data-sharing/cross-account-versions/#version-1","title":"Version 1:","text":"<p>This version creates an AWS Resource Access Manager (RAM) resource share for every cross-account Lake Formation permission granted through the named resource method. If there are many shares, this can exceed limits on the number of resource shares. For Lake Formation tag-based data sharing, cross-account permissions don't use AWS RAM but they rely on Data Catalog resource policy. </p> <p>To avoid hitting any limits, it is best to upgrade to a newer version at your earliest convenience.</p>"},{"location":"data-sharing/cross-account-versions/#version-2","title":"Version 2:","text":"<p>This version streamlines cross-account permission grants between two AWS accounts by using a single AWS RAM resource share to represent multiple grants. This mapping dramatically reduces the number of required resource shares compared to individually sharing each permission grant, making cross-account sharing more scalable. While named resources use AWS RAM for cross-account sharing, LF-Tags based sharing still relies on Data Catalog resource policies. Lake Formation allows sharing catalog resources at the external account level but not at the IAM principal level.</p> <p>If your system utilizes LF-Tags for sharing data, it is strongly advised that you upgrade to a more recent version.</p>"},{"location":"data-sharing/cross-account-versions/#version-3","title":"Version 3:","text":"<p>This version streamlines cross-account resource sharing by using AWS RAM to map multiple cross-account permissions to a single resource share. Optimization of AWS RAM resource shares reduces the number of shares needed for cross-account access.  Further, this version allows sharing resources directly to external account IAM principals as well as sharing at the account level. Additionally, LF-Tags based access control would use AWS RAM for sharing, eliminating the need to update Glue Data Catalog resource policies, hence streamlining sharing with named-resources. You can also establish Tag Based cross-account sharing to Organizations or Organizational units.</p>"},{"location":"data-sharing/cross-account-versions/#version-4","title":"Version 4:","text":"<p>This version includes the benefits of V3. Additionally, it enables resources to be managed in Hybrid Access Mode and also allows sharing hybrid resources across accounts.</p> <p>For more details refer to public documentation</p>"},{"location":"data-sharing/general-data-sharing/","title":"General best practices when using Lake Formation data sharing","text":""},{"location":"data-sharing/general-data-sharing/#transitive-sharing","title":"Transitive sharing","text":"<p>Sharing of catalog objects across accounts using Lake Formation is not transitive. For example, if account A shares a database to account B, then account B cannot share it with account C. In this case, account A have to share the database with account B and account C individually. This is designed to maintain secure ownership of the data assets for the producer account. </p>"},{"location":"data-sharing/general-data-sharing/#cross-account-sharing-scope-and-aws-ram-shares","title":"Cross account sharing scope and AWS RAM shares","text":"<p>While sharing a database or table using Lake Formation, we recommend sharing to the AWS Organization units, Account ids and AWS IAM Principals in external account, in that order. Setting up and sharing with AWS Organizations provides an option in the AWS RAM to enable sharing with AWS Organizations. A screenshot is shown below. </p> <p></p> <p>By checking the box, you enable sharing with AWS Organizations. Now, sharing to an AWS Organization in Lake Formation auto-accepts the RAM invites created by Lake Formation. </p> <ul> <li>If resources are shared at account level, then the  shared resources are visible to the Lake Formation admin on the consumer account, without having to accept the RAM invites. Using automation, you can create resource links and cascade permissions to additional users in the consumer account.</li> <li>If resources are shared directly to a cross account IAM principal, the shared resources are not visible to the Lake Formation admin in the recipient account. The IAM principal in the recipient account would see the shared resources. For the IAM principal level cross account share, the recipient principal should have permissions to create resource links- either create database permissions for creating resource link of a shared database or create table permission inside a database for creating resource link of the shared table. </li> </ul>"},{"location":"data-sharing/general-data-sharing/#sharing-data-catalog-databases-versus-tables","title":"Sharing Data Catalog databases versus tables","text":"<p>When you share a database or table through Lake Formation from one account to another, we recommend to share at the Database level instead of individual table level share wherever you can. This is because you will need to create a resource link on the shared resource on the consumer account, if you plan to use Athena or Redshift Spectrum for querying the shared resource. Creating a database resource link is much easier and all tables could be referenced using rl_source_database.source_tablename. This is easier compared to creating resource links for individual shared tables.</p>"},{"location":"data-sharing/general-data-sharing/#resource-links","title":"Resource Links","text":"<ul> <li>Athena and Redshift Spectrum require a resource link to query a cross account shared resource - either a database resource link or a table resource link. This is because Athena SQL query editor and Redshift Query Editor V2 console does not provide options to directly access the shared database or table names, which are not part of the consumer or recipient account catalog. Also, SQL queries cannot refer to the catalog id of the database and table names. On the other hand, a resource link is an object in the recipient account\u2019s catalog  that points to the shared resource. Hence, Athena and Spectrum queries can use a resource link to refer to the shared resource. </li> </ul> <p>In the below example, rl_database_name refers to a resource link name of the shared database. </p> <pre><code>SELECT column_name1,column_name2 FROM rl_database_name.table_name;\n</code></pre> <ul> <li>Spark jobs in Glue ETL and EMR can refer to the shared resource by providing the catalog id of the source account. Hence resource links are not required if your workflow uses only Glue ETL and EMR. </li> </ul> <p>In the below example, you directly point your query in the recipient account to the shared database name and table by providing the catalog_id of the sharing or source account. </p> <pre><code>AWSGlueDataCatalog_node1709588807746 = glueContext.create_dynamic_frame_from_catalog(\n    database=\"source_account_dbname\",\n    table_name=\"source_account_tablename\",\n    transformation_ctx=\"AWSGlueDataCatalog_node1709588807746\",\n    catalog_id=123456789012\n)\n</code></pre>"},{"location":"data-sharing/general-data-sharing/#recipient-account-considerations","title":"Recipient account considerations","text":"<p>Data sharing through Lake Formation requires few actions to be performed on the consumer or recipient account side. These can be automated but cannot be avoided totally. </p> <p>The steps for the recipient of a shared resource are as follows:</p> <ol> <li>Accept the RAM invite(s) if the account is not part of an AWS Organization or the if organization is not configured to automatically accept invites. </li> <li>If you plan to have the shared resource accessible by Athena and/or Redshift Spectrum, create a resource link to the database or table that is shared using Lake Formtion administrator permissions. Grant DESCRIBE permission on the resource link to all the principals within the account that need access.</li> <li>In addition, grant permissions on the shared resource themselves to principals within the account that need access to the shared resource.</li> </ol> <p>If the resources are shared with a new account first time, in Lake Formation cross account sharing Version 3 and higher, there will be two RAM invites sent from the owner to the consumer account - one for database level and one for table level. The consumer account has to accept both the RAM invites if AWS Organization is not set up as described earlier. </p> <p>Lake Formation users using automation to add and share resources could pass the RAM share ARN created by Lake Formation for each cross account share from producer to consumer. Consumer could verify the passed ARN with the ARN showing up in their AWS RAM under \u2018Resources shared with me\u2019 tab and accept the RAM invite. For any additional resources shared between the same producer and consumer, the new databases and tables are automatically added to the already accepted RAM share. No further action is needed from the consumer admin.  </p>"},{"location":"data-sharing/overview/","title":"Cross Account Data Sharing","text":"<p>Lake Formation's cross-account features enable secure data sharing across multiple AWS accounts, AWS Organizations, or directly with IAM users in other accounts. This allows granular access to the Data Catalog metadata without duplicating the underlying data.</p> <ul> <li>See Cross Account Versions for various cross account versions available.</li> <li>See Upgrade Cross Account Version for steps on how to upgrade cross account version. </li> <li>See Cross Account FAQS for cross account related FAQs.</li> </ul>"},{"location":"data-sharing/upgrading-cross-account-versions/","title":"Upgrading Cross Account Versions","text":"<p>Lake Formation improves its sharing features over time, which sometimes requires changes that are not backwards compatible. To give customers flexibility in choosing when to upgrade, Lake Formation uses versioned sharing modes. Each new version retains the benefits of previous versions while adding enhancements.</p> <p>To maximize the benefits of cross-account sharing, it is recommended to use the newest version of cross-account sharing (currently Version 4) when first setting up Lake Formation permissions or when upgrading from older versions. </p>"},{"location":"data-sharing/upgrading-cross-account-versions/#cross-account-versions","title":"Cross Account Versions","text":"<p>See Cross account Versions for a summary of cross account versions and Cross account public documentation for detailed information.</p>"},{"location":"data-sharing/upgrading-cross-account-versions/#cross-account-compatibility-table","title":"Cross Account Compatibility Table","text":"<p>Below table provides summary of various combinations for source and target account's cross account versions that is supported.</p> Source account\\Target account Target account(receiver) - V1 Target account(receiver) - V2 Target account(receiver) - V3 Target account(receiver) - V4 Source Account(grantor) - V1 supported supported not supported not supported Source Account(grantor) - V2 supported supported Sharing via Named Resources supported, LF-Tags not supported Sharing via Named Resources supported, LF-Tags not supported Source Account(grantor) - V3 supported supported supported supported Source Account(grantor) - V4 supported supported supported supported <p>Note: Modifying the grantor account's cross-account version settings does not change existing permissions the receiver account has on shared resources. However, if you are using V1 sharing and hitting your RAM resource share limit, consider revoking and re-granting cross-account permissions in the source account. Doing so will consolidate multiple RAM resource shares into fewer shares, allowing you to share more resources.</p>"},{"location":"data-sharing/upgrading-cross-account-versions/#steps-to-be-taken-in-source-account","title":"Steps to be taken in Source Account:","text":"<ol> <li>The IAM role or IAM user granting the permission (that is, the grantor) must have the policies mentioned in the AWS managed policy arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager for granting the cross-account permissions. You can also attach the managed policy to your role. </li> <li>If you currently use Glue catalog resource policy, add the following permission as well to the resource policy.  Replace  with the AWS account ID of the grantor account, and  with the AWS region where your resources are located. If you do not have an existing Glue catalog resource policy, no additional steps are required. <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n           \"Effect\": \"Allow\",\n            \"Action\": [\n                \"glue:ShareResource\"\n            ],\n            \"Principal\": {\"Service\": [\n                \"ram.amazonaws.com\"\n            ]},\n            \"Resource\": [\n                \"arn:aws:glue:&lt;region&gt;:&lt;grantor_account_id&gt;:catalog\",\n                \"arn:aws:glue:&lt;region&gt;:&lt;grantor_account_id&gt;:database/*\",\n                \"arn:aws:glue:&lt;region&gt;:&lt;grantor_account_id&gt;:table/*\"\n            ]\n        }\n    ]\n}\n</code></pre> <ol> <li>Update the cross-account version of the source or grantor account to V4.</li> </ol> <p>Once you choose Version 4, all new named resource grants will go through the new cross-account grant mode when using Lake Formation sharing. </p> <p>Optionally to optimize AWS RAM usage for your existing cross-account shares, you can follow the below steps:</p> <ol> <li>Get the list of permissions defined in the account using list-permissions API, and filter out the cross-account permissions on resources owned by the account. In case of named resource sharing you can filter the permissions that have ResourceShare listed under AdditionalDetails. For more details refer to List Permissions</li> </ol> <p>Example output of list-permissions for a cross account share.</p> <pre><code>{\n    \"Principal\": {\n        \"DataLakePrincipalIdentifier\": \"987654321012\"\n    },\n    \"Resource\": {\n        \"Database\": {\n            \"CatalogId\": \"123456789012\",\n            \"Name\": \"salesdb\"\n        }\n    },\n    \"Permissions\": [\n        \"DESCRIBE\"\n    ],\n    \"PermissionsWithGrantOption\": [\n        \"DESCRIBE\"\n    ],\n    \"AdditionalDetails\": {\n        \"ResourceShare\": [\n            \"arn:aws:ram:us-east-1:123456789012:resource-share/15bc4e61-1423-4c44-9452-c23fda161f3f\"\n        ]\n    },\n    \"LastUpdated\": \"2024-03-14T19:07:25.687000+00:00\",\n    \"LastUpdatedBy\": \"arn:aws:iam::123456789012:role/LFAdmin\"\n}\n</code></pre> <ol> <li> <p>Revoke the permission granted on resources to cross account principal: This removes the V1 RAM share corresponding to the resources.      Caution: Once access is revoked for the external account from source account, any principals in the target account who have cascaded access will lose their access to the resource. </p> </li> <li> <p>Re-Grant the permission on resources: This establishes V4 RAM share for the resources shared. </p> </li> </ol> <p>Note: You can also revoke or grant permissions using batch APIs for each database and its tables that are shared across accounts incrementally, and validate if the shared resource is accessible in the target account. For more information refer to public documentation</p> <ol> <li>Optionally you can validate the resources that are shared using RAM invites by invoking RAM API for named resource sharing. See publc documetation for more information.</li> </ol> <p>Note: Permissions granted on the LF-Tags to cross account will stay in tact.</p>"},{"location":"data-sharing/upgrading-cross-account-versions/#step-to-be-taken-in-target-account","title":"Step to be taken in Target Account:","text":"<ol> <li>To receive and accept resource shares using AWS RAM, data lake administrators in target accounts must have an additional policy that grants permission to accept AWS RAM resource share invitations and enable resource sharing with organizations. For information on how to enable sharing with organizations, see Enable sharing with AWS organizations in the AWS RAM User Guide.</li> </ol> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ram:AcceptResourceShareInvitation\",\n                \"ram:RejectResourceShareInvitation\",\n                \"ec2:DescribeAvailabilityZones\",\n                \"ram:EnableSharingWithAwsOrganization\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre> <ol> <li>If the source and target accounts are part of an AWS Organization and if resource sharing is enabled, then the accounts within that Organization will automatically have access to the shared resources without needing RAM invitations. </li> <li>When resource sharing is not enabled, for resources shared with target account, target account should see the new RAM invitations. Data lake admin needs to accept these RAM invites. This establishes Glue catalog resource policies for target account to access the shared resource.</li> <li>In case of re-grant of existing shared resource from source account(grantor) with new cross account version, existing resource links and permissions on those resource links should be intact for account admin and other principals in the target account(receiver).</li> <li>Validate access to the shared resource in the target account.</li> </ol>"},{"location":"data-sharing/upgrading-cross-account-versions/#note","title":"Note:","text":"<p>In order to query a shared database or table using Amazon Athena in the recipient account, you need a resource link.  In the case where the database or table is shared to a direct IAM principal in the recipient account, the principal needs Lake Formation CREATE_TABLE or CREATE_DATABASE permission to create the resource link. They also need the glue:CreateTable or glue:CreateDatabase IAM permission in their IAM policy (based on resource type that is shared).  For more information on this topic, refer to the blog: Introducing hybrid access mode for AWS Glue Data Catalog to secure access using AWS Lake Formation and IAM and Amazon S3 policies</p>"},{"location":"data-sharing/upgrading-cross-account-versions/#other-references","title":"Other References:","text":"<ul> <li>Cross Account Permissions</li> </ul>"},{"location":"lf-tags/basics/","title":"Lake Formation Tags (LF-Tags) Basics","text":""},{"location":"lf-tags/basics/#named-resource-policies-vs-lf-tag-policies","title":"Named Resource policies vs LF-tag policies","text":"<p>When creating an access policy within Lake Formation, there are 3 parts: 1) the principals (eg. IAM users, IAM roles, external accounts, SAML users/groups, etc) that you want to create permissions to.  2) the resources you want to provide access to (eg. database db1, table tableA, etc) 3) the permissions you want to grant (eg. SELECT, DESCRIBE, ALTER, etc on a table)</p> <p>The difference between Named Resource policies and LF-Tag policies is #2, the resources you want to provide permissions on. </p> <p>With Named Resources policies, you specify a specific resource (database, table, column, etc). With LF-Tags, you provide an LF-Tag expression which is used to match to resources for permissions. This makes LF-Tags much more scalable as you can grant permissions on many resources at once and permissions are updated accordingly as tags on resources are added, changed or removed. </p>"},{"location":"lf-tags/basics/#why-use-lf-tags","title":"Why use LF-Tags?","text":"<p>LF-Tags is a mechanism that can be used to group similar resources together, and permission on the group of resources. For example, if you have multiple databases and tables that are used by a wide variety of different groups of users, you can tag databases and tables that own those resources, and grant full read-write permissions to those resources using a single grant. </p> <p></p> <p>Using LF-Tags can greatly simplify the number of grants over using Named Resource policies. See below as an example:</p> <p></p> <p>In the above example with 4 users and 5 tables, if you were use Named Resources policies, you would need to issue 20 grants. However, if you use LF-tags, and tagged all the tables with the same LF-Tag, you would need only one grant for each user to the tag for a total of 4 grants. If there were 100's of users and 1000's of resources, you would need 100*1000=100000 grants using named resources, but 100 grants for each user, and 1000 tagging operations for each resource.</p> <p>LF-Tags also hierarchical. If you tag a database, all tables and columns within the database would inherit the LF-Tag. If you tag a table, then all columns would inherit the tags. You can also override inherited tags, so if you tag a database with tag AccessLevel = 'public', but want to change the tag value for a table to AccessLevel = 'private', then the table and all columns would override that value. </p>"},{"location":"lf-tags/basics/#how-lf-tag-expressions-work","title":"How LF-Tag expressions work","text":"<p>When granting permissions using LF-Tags, you need to provide a LF-Tag expression. This expression, if it evaluates to true, will grant a principal to the resource. LF-Tag expressions contain one or more LF-Tag names, and for each LF-Tag, one or more values. Each tag name is AND'ed in the expression and each lf-tag value is OR'ed. For example, LF-Tag1 = 'abc' AND LF-Tag2 = ('edf' OR 'ghi'). LF-Tags cannot be OR'ed.</p> <p>Let's look an example: </p> <p></p> <p>With the above example, we have three tables (although they can be columns or databases as well).</p> <p>If you were to create a grant with the LF-Tag expression of Sensitivity = \"Public\", then this expression would be true for the Customer table, and Sales Table. Notice that not all tags need to evaluate to true for the resource to be granted.</p> <p>If you were to create a grant with the LF-Tag expression Audit = \"true\", then only the Sales table would evaluate true. </p> <p>If you were to create a grant with the LF-Tag expression of Owner = 'Aarthi' and Audit = 'true', then again, only the Sales table would evaluate to true.</p>"},{"location":"lf-tags/basics/#limitations","title":"Limitations","text":"<p>Before using LF-Tags, please see Lake Formation documentation for current limitations located at https://docs.aws.amazon.com/lake-formation/latest/dg/TBAC-notes.html</p>"},{"location":"lf-tags/best-practices/","title":"LF-Tag best practices","text":""},{"location":"lf-tags/best-practices/#integrating-with-lf-tags","title":"Integrating with LF-Tags","text":"<p>When integrating with LF-Tags, there are few suggestions on how to successfully adopt LF-Tags. See the following list of advice:</p> <ul> <li> <p>Define your LF-Tag ontology for your current and future needs. Adding or changing the ontology will require additional work in the future.</p> </li> <li> <p>Make note of the limitations that currently exists. For example, LF-Tags currently does not support tagging resources with multiple values from the same LF-Tag. See the limitations for details.</p> </li> <li> <p>Keep the tagging ontology as simple as possible. Having too many LF-Tags can make it difficult to manage and track permissions.</p> </li> <li> <p>Document the tagging ontology and share with data stewards so that they are very clear when/how to use the LF-Tags. </p> </li> <li> <p>LF-Tag permissioning and Named Resource policies can exist together. The effective permissions for a user is the union of permissions of all named resource policies and LF-Tag policies. </p> </li> </ul>"},{"location":"lf-tags/common-ontologies/","title":"Common LF-Tag Ontologies","text":"<p>Here is a list of common LF-Tags that make up a tagging ontology that are commonly seen by customers:</p> <ol> <li>Environment (eg. dev, beta, gamma, prod) - LF-Tag that denotes which stage a particular resource exists and granting developers to resource in dev and beta, but only application access to gamma and prod.</li> <li>Departments (eg. sales, marketing, engineering, etc) - LF-Tag that groups department datasets using a single tag. This can be used for sharing purpose (ie departmentA shares with departmentB).</li> <li>Product (eg. dataproduct1, dataproduct2, etc) - LF-Tag that groups similar datasets under a data product that be used for permissioning and sharing.</li> <li>Owner (eg. GroupA, GroupB, GroupC) - LF-Tag that provides certain groups of principals the ability different set of permissions (like write/delete permissions) that is separate for sharing purposes. </li> <li>Roles (eg. data scientist, data engineer, application, etc) - LF-Tag that provides different levels of permissions based on role. For example, a data steward could have grantable full access to a dataset where as a data scientist could have read only permissions.</li> <li>Data Classification (eg. SSN, Address, PhoneNumber, etc ) - LF-Tag that allows to permission differently based on the classification of data. More sensitive classifications can be accessable by privileged consumers, etc.</li> <li>Data Sensitivity (eg. public, private, PII, etc) - LF-Tag that allows different groups of principals to accessible columns or tables based on their sensitivity of the column to meet compliance rules, like GDPR. </li> <li>Sharable (eg. sharable, notsharable) - LF-Tag that groups resources that can be shared with other departments.  </li> </ol>"},{"location":"lf-tags/example-usecase/","title":"Example Customer use case","text":"<p>Customer X has marketing departing with following personas and requirements:</p> <ul> <li> <p>Executive : Should be able to access all the marketing datasets</p> </li> <li> <p>Insight Analyst : Should have read access to all non-sensitive datasets that are shared with the department.</p> </li> <li> <p>Application Manager: Manages 2 teams - AppTeamA &amp; AppTeamB and should have readwrite access to all the datasets they use.</p> <ul> <li> <p>AppTeamA :      Developers      : Needs readwrite access to dataset that is used by the project A.     Data Scientists : Needs readwrite access to non-sensitive datasets that is used by the project A</p> </li> <li> <p>AppTeamB :     Developers      : Needs readwrite access to dataset that is used by the project B.     Data Scientists : Needs readwrite access to non-sensitive datasets that is used by the project B</p> </li> </ul> </li> </ul> <p>Marketing departments have following datasets to cater to the needs of the users in the MarketingDB database:</p> Table Name Table Description Customer Contains customer details including sensitive information Product Contains product details that are maintained by the department. Campaigns Contains campaign information that are available for each of the product. Recommendation Contains customer preferences and recommendation based on user profile. ExecutiveDashboard Contains revenue reports for executive access. <p>Following LF Tag Ontologies are defined for the datasets:</p> Tag Key Tag Values Domain <ul><li>Marketing - the only allowed value for now</li></ul> level <ul><li>1 - Executive only</li><li>2 - Non-executive users in the department</li><li>3 - open to all users.</li></ul> Dataset <ul><li>Shared - Common datasets that are shared with other department.</li><li>Non-Shared - Non-shared datasets that are specific to the department.</li></ul> Classification <ul><li>Restricted  - Contains sensitive data</li><li>Public      - Contains non-sensitive data</li></ul> <p>Project team A and team B might have overlapping dataset needs for their usage. Say for example: If we have Tag AppTeam with values as TeamA, TeamB and they need access to same table. The limitation that currently exist is that you can't associate/tag multiple values of the same tag key to given table. Workaround is to create Tag for each team as shown below:</p> Tag Key Tag Values AppTeam:TeamA yes - For datasets used in Project A AppTeam:TeamB yes - For datasets used in Project B <p>Tags are associated with resources as shown below: </p> <p>Resources access are granted to user using LF Tags expression as shown below: </p> <p>Let us review the LF Tags expression permission granted to the personas and effective resource access available for them</p> <p>Executive           - gets read write access to all tables under MarketingDB.</p> <p>Insight Analyst     - gets read access to product and campaigns table which are shared dataset and are available to non-executive or all users.</p> <p>Application Manager - has 2 sets of permissions granted to provide access to both AppteamA and AppteamB dataset. So the effective permission is union of all the resources granted to each team which includes readwrite access to customer,product,campaigns,recommendation tables.</p> <p>AppTeamA:</p> <p>Developer           - gets read write access to tables that are tagged with AppTeam:TeamA - customer,product,recomendations.</p> <p>Data Scientists     - gets read write access to non-sensitive data in tables that are tagged with AppTeam:TeamA - customer(all columns except SSN,EMAIL,NAME),product,recomendations.</p> <p>AppTeamB: Developer           - gets read write access to tables that are tagged with AppTeam:TeamB - product, campaigns</p> <p>Data Scientists     - gets read write access to non-sensitive data in tables that are tagged with AppTeam:TeamB - product, campaigns.</p>"},{"location":"lf-tags/limitations/","title":"LF-Tag limitations","text":"<p>Please see Lake Formations public documentation for the current limitations as they may change. Many of the limits associated with LF-Tags are soft limits so if you need to increase size limits, please ensure a support case.</p>"},{"location":"lf-tags/limitations/#limitation-1-you-can-only-attach-a-single-value-of-an-lf-tag-tag-to-a-resource","title":"Limitation #1 - You can only attach a single value of an LF-Tag tag to a resource","text":"<p>Suppose you want to create an LF-Tag, AccessibleRoles that contains a list of roles, Engineering, Sales, Marketing that can access a resource. If you need multiple roles to access a single resource, then you would need to specify multiple values to the resource. This is currently not supported today.</p> <p>The solution here is to create multiple LF-Tags that represents each value. From the above example, we can create LF-Tags AccessibleRoles:Engineering, AccessibleRoles:Sales, and AccessibleRoles:Marketing with each with a single value of true. You can then tag a resource with appropriate LF-Tags.</p>"},{"location":"lf-tags/limitations/#limitation-2-no-or-expression-in-grant-expression-for-multiple-lf-tags","title":"Limitation #2 - No OR expression in grant expression for multiple LF-Tags","text":"<p>Suppose we take the example in limitation #1, where we have LF-Tags AccessibleRoles:Engineering, AccessibleRoles:Sales, and AccessibleRoles:Marketing, and you want to grant a principal all resources that are tagged with AccessibleRoles:Sales, and AccessibleRoles:Marketing. LF-Tag expressions do not support OR operators between LF-Tags, ie grant user User1 to all resources tagged with *AccessibleRoles:Engineering = true OR AccessibleRoles:Sales = true\". This is currently not supported with LF-Tags.</p> <p>The solution here is to perform multiple grant operations, one for each LF-Tag. For example, we can have one grant expression to be AccessibleRoles:Sales = true , and another being AccessibleRoles:Marketing = true.</p>"},{"location":"lf-tags/limitations/#limitation-3-no-less-than-operator","title":"Limitation #3 - No Less than operator","text":"<p>Some customers may want to create an LF-Tag that has some scale or hierarchy and when a grant occurs at one level, then the user should get permissions at that level and everything below it. Since LF-Tag expressions support OR operator for LF-Tag values, you can mimic the behavor. For example, if you want to create a SensitivityLevel tag with values 1,2,3,4,5, if you want to grant a user resources that have SensitivityLevel = 3, then your grant expression can be Sensitivity Level = 1 OR 2 OR 3</p>"},{"location":"lf-tags/overview/","title":"Lake Formation Tags (LF-Tags)","text":"<p>Lake Formation Tags (LF-tags) were created to help customers scale their permissions by providing an alternative way of creating access policies than using named resources. </p> <ul> <li>See LF-Tag Basics for how LF-Tags work. </li> <li>See Common LF-Tag Ontologies for common tags customers tend to use. </li> <li>See Best Practices for best practices when using LF-Tags.</li> <li>See Example Usage for an example usage of LF-Tags.</li> <li>See Limitations for limitations to be aware of.</li> </ul>"}]}