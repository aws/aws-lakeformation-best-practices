{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Lake Formation \u00b6 AWS Lake Formation easily creates secure data lakes, making data available for wide-ranging analytics. This guide provides readers best practices when using various features and aspects of Lake Formation.","title":"Introduction"},{"location":"#aws-lake-formation","text":"AWS Lake Formation easily creates secure data lakes, making data available for wide-ranging analytics. This guide provides readers best practices when using various features and aspects of Lake Formation.","title":"AWS Lake Formation"},{"location":"lf-tags/","text":"Lake Formation Tags (LF-Tags) \u00b6 Lake Formation Tags (LF-tags) were created to help customers scale their permissions by providing an alternative way of creating access policies than using named resources. See LF-Tag Basics for how LF-Tags work. See Common LF-Tag Ontologies for common tags customers tend to use. See Best Practices for best practices when using LF-Tags. See Example Usage for an example usage of LF-Tags. See Limitations for limitations to be aware of.","title":"Lake Formation Tags (LF-Tags)"},{"location":"lf-tags/#lake-formation-tags-lf-tags","text":"Lake Formation Tags (LF-tags) were created to help customers scale their permissions by providing an alternative way of creating access policies than using named resources. See LF-Tag Basics for how LF-Tags work. See Common LF-Tag Ontologies for common tags customers tend to use. See Best Practices for best practices when using LF-Tags. See Example Usage for an example usage of LF-Tags. See Limitations for limitations to be aware of.","title":"Lake Formation Tags (LF-Tags)"},{"location":"lf-tags/basics/","text":"Lake Formation Tags (LF-Tags) Basics \u00b6 Named Resource policies vs LF-tag policies \u00b6 When creating an access policy within Lake Formation, there are 3 parts: 1) the principals (eg. IAM users, IAM roles, external accounts, SAML users/groups, etc) that you want to create permissions to. 2) the resources you want to provide access to (eg. database db1, table tableA, etc) 3) the permissions you want to grant (eg. SELECT, DESCRIBE, ALTER, etc on a table) The difference between Named Resource policies and LF-Tag policies is #2, the resources you want to provide permissions on. With Named Resources policies, you specify a specific resource (database, table, column, etc). With LF-Tags, you provide an LF-Tag expression which is used to match to resources for permissions. This makes LF-Tags much more scalable as you can grant permissions on many resources at once and permissions are updated accordingly as tags on resources are added, changed or removed. Why use LF-Tags? \u00b6 LF-Tags is a mechanism that can be used to group similar resources together, and permission on the group of resources. For example, if you have multiple databases and tables that are used by a wide variety of different groups of users, you can tag databases and tables that own those resources, and grant full read-write permissions to those resources using a single grant. Using LF-Tags can greatly simplify the number of grants over using Named Resource policies. See below as an example: In the above example with 4 users and 5 tables, if you were use Named Resources policies, you would need to issue 20 grants. However, if you use LF-tags, and tagged all the tables with the same LF-Tag, you would need only one grant for each user to the tag for a total of 4 grants. If there were 100's of users and 1000's of resources, you would need 100*1000=100000 grants using named resources, but 100 grants for each user, and 1000 tagging operations for each resource. LF-Tags also hierarchical. If you tag a database, all tables and columns within the database would inherit the LF-Tag. If you tag a table, then all columns would inherit the tags. You can also override inherited tags, so if you tag a database with tag AccessLevel = 'public', but want to change the tag value for a table to AccessLevel = 'private', then the table and all columns would override that value. How LF-Tag expressions work \u00b6 When granting permissions using LF-Tags, you need to provide a LF-Tag expression. This expression, if it evaluates to true, will grant a principal to the resource. LF-Tag expressions contain one or more LF-Tag names, and for each LF-Tag, one or more values. Each tag name is AND'ed in the expression and each lf-tag value is OR'ed. For example, LF-Tag1 = 'abc' AND LF-Tag2 = ('edf' OR 'ghi'). LF-Tags cannot be OR'ed. Let's look an example: With the above example, we have three tables (although they can be columns or databases as well). If you were to create a grant with the LF-Tag expression of Sensitivity = \"Public\", then this expression would be true for the Customer table, and Sales Table. Notice that not all tags need to evaluate to true for the resource to be granted. If you were to create a grant with the LF-Tag expression Audit = \"true\", then only the Sales table would evaluate true. If you were to create a grant with the LF-Tag expression of Owner = 'Aarthi' and Audit = 'true', then again, only the Sales table would evaluate to true. Limitations \u00b6 Before using LF-Tags, please see Lake Formation documentation for current limitations located at https://docs.aws.amazon.com/lake-formation/latest/dg/TBAC-notes.html","title":"LF-Tag Basics"},{"location":"lf-tags/basics/#lake-formation-tags-lf-tags-basics","text":"","title":"Lake Formation Tags (LF-Tags) Basics"},{"location":"lf-tags/basics/#named-resource-policies-vs-lf-tag-policies","text":"When creating an access policy within Lake Formation, there are 3 parts: 1) the principals (eg. IAM users, IAM roles, external accounts, SAML users/groups, etc) that you want to create permissions to. 2) the resources you want to provide access to (eg. database db1, table tableA, etc) 3) the permissions you want to grant (eg. SELECT, DESCRIBE, ALTER, etc on a table) The difference between Named Resource policies and LF-Tag policies is #2, the resources you want to provide permissions on. With Named Resources policies, you specify a specific resource (database, table, column, etc). With LF-Tags, you provide an LF-Tag expression which is used to match to resources for permissions. This makes LF-Tags much more scalable as you can grant permissions on many resources at once and permissions are updated accordingly as tags on resources are added, changed or removed.","title":"Named Resource policies vs LF-tag policies"},{"location":"lf-tags/basics/#why-use-lf-tags","text":"LF-Tags is a mechanism that can be used to group similar resources together, and permission on the group of resources. For example, if you have multiple databases and tables that are used by a wide variety of different groups of users, you can tag databases and tables that own those resources, and grant full read-write permissions to those resources using a single grant. Using LF-Tags can greatly simplify the number of grants over using Named Resource policies. See below as an example: In the above example with 4 users and 5 tables, if you were use Named Resources policies, you would need to issue 20 grants. However, if you use LF-tags, and tagged all the tables with the same LF-Tag, you would need only one grant for each user to the tag for a total of 4 grants. If there were 100's of users and 1000's of resources, you would need 100*1000=100000 grants using named resources, but 100 grants for each user, and 1000 tagging operations for each resource. LF-Tags also hierarchical. If you tag a database, all tables and columns within the database would inherit the LF-Tag. If you tag a table, then all columns would inherit the tags. You can also override inherited tags, so if you tag a database with tag AccessLevel = 'public', but want to change the tag value for a table to AccessLevel = 'private', then the table and all columns would override that value.","title":"Why use LF-Tags?"},{"location":"lf-tags/basics/#how-lf-tag-expressions-work","text":"When granting permissions using LF-Tags, you need to provide a LF-Tag expression. This expression, if it evaluates to true, will grant a principal to the resource. LF-Tag expressions contain one or more LF-Tag names, and for each LF-Tag, one or more values. Each tag name is AND'ed in the expression and each lf-tag value is OR'ed. For example, LF-Tag1 = 'abc' AND LF-Tag2 = ('edf' OR 'ghi'). LF-Tags cannot be OR'ed. Let's look an example: With the above example, we have three tables (although they can be columns or databases as well). If you were to create a grant with the LF-Tag expression of Sensitivity = \"Public\", then this expression would be true for the Customer table, and Sales Table. Notice that not all tags need to evaluate to true for the resource to be granted. If you were to create a grant with the LF-Tag expression Audit = \"true\", then only the Sales table would evaluate true. If you were to create a grant with the LF-Tag expression of Owner = 'Aarthi' and Audit = 'true', then again, only the Sales table would evaluate to true.","title":"How LF-Tag expressions work"},{"location":"lf-tags/basics/#limitations","text":"Before using LF-Tags, please see Lake Formation documentation for current limitations located at https://docs.aws.amazon.com/lake-formation/latest/dg/TBAC-notes.html","title":"Limitations"},{"location":"lf-tags/best-practices/","text":"LF-Tag best practices \u00b6 Integrating with LF-Tags \u00b6 When integrating with LF-Tags, there are few suggestions on how to successfully adopt LF-Tags. See the following list of advice: Define your LF-Tag ontology for your current and future needs. Adding or changing the ontology will require additional work in the future. Make note of the limitations that currently exists. For example, LF-Tags currently does not support tagging resources with multiple values from the same LF-Tag. See the limitations for details. Keep the tagging ontology as simple as possible. Having too many LF-Tags can make it difficult to manage and track permissions. Document the tagging ontology and share with data stewards so that they are very clear when/how to use the LF-Tags. LF-Tag permissioning and Named Resource policies can exist together. The effective permissions for a user is the union of permissions of all named resource policies and LF-Tag policies.","title":"Best Practices"},{"location":"lf-tags/best-practices/#lf-tag-best-practices","text":"","title":"LF-Tag best practices"},{"location":"lf-tags/best-practices/#integrating-with-lf-tags","text":"When integrating with LF-Tags, there are few suggestions on how to successfully adopt LF-Tags. See the following list of advice: Define your LF-Tag ontology for your current and future needs. Adding or changing the ontology will require additional work in the future. Make note of the limitations that currently exists. For example, LF-Tags currently does not support tagging resources with multiple values from the same LF-Tag. See the limitations for details. Keep the tagging ontology as simple as possible. Having too many LF-Tags can make it difficult to manage and track permissions. Document the tagging ontology and share with data stewards so that they are very clear when/how to use the LF-Tags. LF-Tag permissioning and Named Resource policies can exist together. The effective permissions for a user is the union of permissions of all named resource policies and LF-Tag policies.","title":"Integrating with LF-Tags"},{"location":"lf-tags/common-ontologies/","text":"Common LF-Tag Ontologies \u00b6 Here is a list of common LF-Tags that make up a tagging ontology that are commonly seen by customers: Environment (eg. dev, beta, gamma, prod) - LF-Tag that denotes which stage a particular resource exists and granting developers to resource in dev and beta, but only application access to gamma and prod. Departments (eg. sales, marketing, engineering, etc) - LF-Tag that groups department datasets using a single tag. This can be used for sharing purpose (ie departmentA shares with departmentB). Product (eg. dataproduct1, dataproduct2, etc) - LF-Tag that groups similar datasets under a data product that be used for permissioning and sharing. Owner (eg. GroupA, GroupB, GroupC) - LF-Tag that provides certain groups of principals the ability different set of permissions (like write/delete permissions) that is separate for sharing purposes. Roles (eg. data scientist, data engineer, application, etc) - LF-Tag that provides different levels of permissions based on role. For example, a data steward could have grantable full access to a dataset where as a data scientist could have read only permissions. Data Classification (eg. SSN, Address, PhoneNumber, etc ) - LF-Tag that allows to permission differently based on the classification of data. More sensitive classifications can be accessable by privileged consumers, etc. Data Sensitivity (eg. public, private, PII, etc) - LF-Tag that allows different groups of principals to accessible columns or tables based on their sensitivity of the column to meet compliance rules, like GDPR. Sharable (eg. sharable, notsharable) - LF-Tag that groups resources that can be shared with other departments.","title":"Common Ontologies"},{"location":"lf-tags/common-ontologies/#common-lf-tag-ontologies","text":"Here is a list of common LF-Tags that make up a tagging ontology that are commonly seen by customers: Environment (eg. dev, beta, gamma, prod) - LF-Tag that denotes which stage a particular resource exists and granting developers to resource in dev and beta, but only application access to gamma and prod. Departments (eg. sales, marketing, engineering, etc) - LF-Tag that groups department datasets using a single tag. This can be used for sharing purpose (ie departmentA shares with departmentB). Product (eg. dataproduct1, dataproduct2, etc) - LF-Tag that groups similar datasets under a data product that be used for permissioning and sharing. Owner (eg. GroupA, GroupB, GroupC) - LF-Tag that provides certain groups of principals the ability different set of permissions (like write/delete permissions) that is separate for sharing purposes. Roles (eg. data scientist, data engineer, application, etc) - LF-Tag that provides different levels of permissions based on role. For example, a data steward could have grantable full access to a dataset where as a data scientist could have read only permissions. Data Classification (eg. SSN, Address, PhoneNumber, etc ) - LF-Tag that allows to permission differently based on the classification of data. More sensitive classifications can be accessable by privileged consumers, etc. Data Sensitivity (eg. public, private, PII, etc) - LF-Tag that allows different groups of principals to accessible columns or tables based on their sensitivity of the column to meet compliance rules, like GDPR. Sharable (eg. sharable, notsharable) - LF-Tag that groups resources that can be shared with other departments.","title":"Common LF-Tag Ontologies"},{"location":"lf-tags/example-usecase/","text":"Example Customer use case \u00b6 Customer X has marketing departing with following personas and requirements: Executive : Should be able to access all the marketing datasets Insight Analyst : Should have read access to all non-sensitive datasets that are shared with the department. Application Manager: Manages 2 teams - AppTeamA & AppTeamB and should have readwrite access to all the datasets they use. AppTeamA : Developers : Needs readwrite access to dataset that is used by the project A. Data Scientists : Needs readwrite access to non-sensitive datasets that is used by the project A AppTeamB : Developers : Needs readwrite access to dataset that is used by the project B. Data Scientists : Needs readwrite access to non-sensitive datasets that is used by the project B Marketing departments have following datasets to cater to the needs of the users in the MarketingDB database: Table Name Table Description Customer Contains customer details including sensitive information Product Contains product details that are maintained by the department. Campaigns Contains campaign information that are available for each of the product. Recommendation Contains customer preferences and recommendation based on user profile. ExecutiveDashboard Contains revenue reports for executive access. Following LF Tag Ontologies are defined for the datasets: Tag Key Tag Values Domain Marketing - the only allowed value for now level 1 - Executive only 2 - Non-executive users in the department 3 - open to all users. Dataset Shared - Common datasets that are shared with other department. Non-Shared - Non-shared datasets that are specific to the department. Classification Restricted - Contains sensitive data Public - Contains non-sensitive data Project team A and team B might have overlapping dataset needs for their usage. Say for example: If we have Tag AppTeam with values as TeamA, TeamB and they need access to same table. The limitation that currently exist is that you can't associate/tag multiple values of the same tag key to given table. Workaround is to create Tag for each team as shown below: Tag Key Tag Values AppTeam:TeamA yes - For datasets used in Project A AppTeam:TeamB yes - For datasets used in Project B Tags are associated with resources as shown below: Resources access are granted to user using LF Tags expression as shown below: Let us review the LF Tags expression permission granted to the personas and effective resource access available for them Executive - gets read write access to all tables under MarketingDB. Insight Analyst - gets read access to product and campaigns table which are shared dataset and are available to non-executive or all users. Application Manager - has 2 sets of permissions granted to provide access to both AppteamA and AppteamB dataset. So the effective permission is union of all the resources granted to each team which includes readwrite access to customer,product,campaigns,recommendation tables. AppTeamA: Developer - gets read write access to tables that are tagged with AppTeam:TeamA - customer,product,recomendations. Data Scientists - gets read write access to non-sensitive data in tables that are tagged with AppTeam:TeamA - customer(all columns except SSN,EMAIL,NAME),product,recomendations. AppTeamB: Developer - gets read write access to tables that are tagged with AppTeam:TeamB - product, campaigns Data Scientists - gets read write access to non-sensitive data in tables that are tagged with AppTeam:TeamB - product, campaigns.","title":"Example Usecase"},{"location":"lf-tags/example-usecase/#example-customer-use-case","text":"Customer X has marketing departing with following personas and requirements: Executive : Should be able to access all the marketing datasets Insight Analyst : Should have read access to all non-sensitive datasets that are shared with the department. Application Manager: Manages 2 teams - AppTeamA & AppTeamB and should have readwrite access to all the datasets they use. AppTeamA : Developers : Needs readwrite access to dataset that is used by the project A. Data Scientists : Needs readwrite access to non-sensitive datasets that is used by the project A AppTeamB : Developers : Needs readwrite access to dataset that is used by the project B. Data Scientists : Needs readwrite access to non-sensitive datasets that is used by the project B Marketing departments have following datasets to cater to the needs of the users in the MarketingDB database: Table Name Table Description Customer Contains customer details including sensitive information Product Contains product details that are maintained by the department. Campaigns Contains campaign information that are available for each of the product. Recommendation Contains customer preferences and recommendation based on user profile. ExecutiveDashboard Contains revenue reports for executive access. Following LF Tag Ontologies are defined for the datasets: Tag Key Tag Values Domain Marketing - the only allowed value for now level 1 - Executive only 2 - Non-executive users in the department 3 - open to all users. Dataset Shared - Common datasets that are shared with other department. Non-Shared - Non-shared datasets that are specific to the department. Classification Restricted - Contains sensitive data Public - Contains non-sensitive data Project team A and team B might have overlapping dataset needs for their usage. Say for example: If we have Tag AppTeam with values as TeamA, TeamB and they need access to same table. The limitation that currently exist is that you can't associate/tag multiple values of the same tag key to given table. Workaround is to create Tag for each team as shown below: Tag Key Tag Values AppTeam:TeamA yes - For datasets used in Project A AppTeam:TeamB yes - For datasets used in Project B Tags are associated with resources as shown below: Resources access are granted to user using LF Tags expression as shown below: Let us review the LF Tags expression permission granted to the personas and effective resource access available for them Executive - gets read write access to all tables under MarketingDB. Insight Analyst - gets read access to product and campaigns table which are shared dataset and are available to non-executive or all users. Application Manager - has 2 sets of permissions granted to provide access to both AppteamA and AppteamB dataset. So the effective permission is union of all the resources granted to each team which includes readwrite access to customer,product,campaigns,recommendation tables. AppTeamA: Developer - gets read write access to tables that are tagged with AppTeam:TeamA - customer,product,recomendations. Data Scientists - gets read write access to non-sensitive data in tables that are tagged with AppTeam:TeamA - customer(all columns except SSN,EMAIL,NAME),product,recomendations. AppTeamB: Developer - gets read write access to tables that are tagged with AppTeam:TeamB - product, campaigns Data Scientists - gets read write access to non-sensitive data in tables that are tagged with AppTeam:TeamB - product, campaigns.","title":"Example Customer use case"},{"location":"lf-tags/limitations/","text":"LF-Tag limitations \u00b6 Please see Lake Formations public documentation for the current limitations as they may change. Many of the limits associated with LF-Tags are soft limits so if you need to increase size limits, please ensure a support case. Limitation #1 - You can only attach a single value of an LF-Tag tag to a resource \u00b6 Suppose you want to create an LF-Tag, AccessibleRoles that contains a list of roles, Engineering, Sales, Marketing that can access a resource. If you need multiple roles to access a single resource, then you would need to specify multiple values to the resource. This is currently not supported today. The solution here is to create multiple LF-Tags that represents each value. From the above example, we can create LF-Tags AccessibleRoles:Engineering , AccessibleRoles:Sales , and AccessibleRoles:Marketing with each with a single value of true . You can then tag a resource with appropriate LF-Tags. Limitation #2 - No OR expression in grant expression for multiple LF-Tags \u00b6 Suppose we take the example in limitation #1, where we have LF-Tags AccessibleRoles:Engineering , AccessibleRoles:Sales , and AccessibleRoles:Marketing , and you want to grant a principal all resources that are tagged with AccessibleRoles:Sales , and AccessibleRoles:Marketing . LF-Tag expressions do not support OR operators between LF-Tags, ie grant user User1 to all resources tagged with *AccessibleRoles:Engineering = true OR AccessibleRoles:Sales = true\". This is currently not supported with LF-Tags. The solution here is to perform multiple grant operations, one for each LF-Tag. For example, we can have one grant expression to be AccessibleRoles:Sales = true , and another being AccessibleRoles:Marketing = true . Limitation #3 - No Less than operator \u00b6 Some customers may want to create an LF-Tag that has some scale or hierarchy and when a grant occurs at one level, then the user should get permissions at that level and everything below it. Since LF-Tag expressions support OR operator for LF-Tag values, you can mimic the behavor. For example, if you want to create a SensitivityLevel tag with values 1,2,3,4,5 , if you want to grant a user resources that have SensitivityLevel = 3, then your grant expression can be Sensitivity Level = 1 OR 2 OR 3","title":"Limitations"},{"location":"lf-tags/limitations/#lf-tag-limitations","text":"Please see Lake Formations public documentation for the current limitations as they may change. Many of the limits associated with LF-Tags are soft limits so if you need to increase size limits, please ensure a support case.","title":"LF-Tag limitations"},{"location":"lf-tags/limitations/#limitation-1-you-can-only-attach-a-single-value-of-an-lf-tag-tag-to-a-resource","text":"Suppose you want to create an LF-Tag, AccessibleRoles that contains a list of roles, Engineering, Sales, Marketing that can access a resource. If you need multiple roles to access a single resource, then you would need to specify multiple values to the resource. This is currently not supported today. The solution here is to create multiple LF-Tags that represents each value. From the above example, we can create LF-Tags AccessibleRoles:Engineering , AccessibleRoles:Sales , and AccessibleRoles:Marketing with each with a single value of true . You can then tag a resource with appropriate LF-Tags.","title":"Limitation #1 - You can only attach a single value of an LF-Tag tag to a resource"},{"location":"lf-tags/limitations/#limitation-2-no-or-expression-in-grant-expression-for-multiple-lf-tags","text":"Suppose we take the example in limitation #1, where we have LF-Tags AccessibleRoles:Engineering , AccessibleRoles:Sales , and AccessibleRoles:Marketing , and you want to grant a principal all resources that are tagged with AccessibleRoles:Sales , and AccessibleRoles:Marketing . LF-Tag expressions do not support OR operators between LF-Tags, ie grant user User1 to all resources tagged with *AccessibleRoles:Engineering = true OR AccessibleRoles:Sales = true\". This is currently not supported with LF-Tags. The solution here is to perform multiple grant operations, one for each LF-Tag. For example, we can have one grant expression to be AccessibleRoles:Sales = true , and another being AccessibleRoles:Marketing = true .","title":"Limitation #2 - No OR expression in grant expression for multiple LF-Tags"},{"location":"lf-tags/limitations/#limitation-3-no-less-than-operator","text":"Some customers may want to create an LF-Tag that has some scale or hierarchy and when a grant occurs at one level, then the user should get permissions at that level and everything below it. Since LF-Tag expressions support OR operator for LF-Tag values, you can mimic the behavor. For example, if you want to create a SensitivityLevel tag with values 1,2,3,4,5 , if you want to grant a user resources that have SensitivityLevel = 3, then your grant expression can be Sensitivity Level = 1 OR 2 OR 3","title":"Limitation #3 - No Less than operator"}]}